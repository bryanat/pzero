// Worked with Yueqi

import org.mongodb.scala._
import org.mongodb.scala.model._
import org.mongodb.scala.model.Filters._
import org.mongodb.scala.model.Projections._
import org.mongodb.scala.model.Sorts._
import org.mongodb.scala.model.Updates._
import org.mongodb.scala.model.UpdateOptions
import org.mongodb.scala.bson.BsonObjectId
import tour.Helpers._
import scala.io.StdIn.readLine
import scala.concurrent._
import ExecutionContext.Implicits.global

object Main extends App {
  println("Main started")

  val mongoClient: MongoClient = MongoClient()
  val database: MongoDatabase = mongoClient.getDatabase("pzero")
  val pcollection: MongoCollection[Document] = database.getCollection("passwordcollection")

  // pcollection.insertOne(Document("username" -> "user1", "password" -> "password1")).printResults()
  // pcollection.insertOne(Document("username" -> "user2", "password" -> "password2")).printResults()
  // pcollection.insertOne(Document("username" -> "user3", "password" -> "password3")).printResults()
  // pcollection.insertOne(Document("username" -> "user6", "password" -> "password6")).printResults()
  // pcollection.insertMany(Seq(Document("username" -> "user4", "password" -> "password4"), Document("username" -> "user5", "password" -> "password5"))).printResults()

  def start(): Unit={
      val stdIN = System.console()
      println("Welcome to Jobs.com. please log in or create a new account")
      println("enter L to log in")
      println("enter C to create a new account")
      val ans = readLine().toLowerCase()
      if (ans =="l") {logIn()}
      else if (ans=="c") {createAccount()}
  }

  start()


  def logIn(): Unit= {
    pcollection.find().printResults()
    
  //   // val passFile = "password_file" //s
    
  //   var stdIn = System.console()
  //   //while true  {
  //       val userInput = readLine("Username: ")
  //       // val passInput = stdIN.readPassword("Password: ")
  //       val passInput = readLine("Password: ")

  //       if(db.password_file.find(username:userInput)) {
  //           //if (db.password_file.find({}))
  //           if (db.password_file.find(Document(username->userInput), Document(password->1))!=passInput) {
  //               if (db.password_file.find({username:userInput}, {password:1})!=passInput) {
  //                   println("wrong password, try again.")
  //               }
  //               else {
  //                   var ans = stdIn.readLine("If you want to update your resume, enter U, else, enter any other key: ").toLowerCase()
  //                   // if (ans == "u") {
  //                   //     resumeUpdate(userInput)
  //                   // }
  //                   // else {
  //                   //     resumeMatch(userInput);
  //                   // }
  //               }
  //           }
  //       }
  //       else {
  //          println("username does not exists, please try again or create a new account")
  //          var ans = "x"
  //          while (ans!="c" | ans!="l") {
  //              ans = readLine(println("To log in again, enter L. To create an account, enter C:  ").toLowerCase())
  //              if (ans == "c") {
  //                  createAccount()
  //              }
  //              else if (ans !="l" && ans!="c") {
  //                  println("sorry, that's not a valid input")
  //              }
  //          }
  //      }
  //   //}
   }


  def createAccount(): Unit= {
    println("createAccount called")
    var exists = true
    var inputName = ""
    var inputPassword = ""
    //create username and password
    while (exists == true) {
    var x = Document("pillows" -> 3, "comfiness" -> "super comfy")
    var p = Promise[Boolean]()
    var f = p.future
    var usernameExists = false
    var user = ""
    var pass = ""
      println("please create new username and password")
      inputName = readLine("username: ") 
      inputPassword = readLine( "password: ") 
      //if username already exists then set usernameExists = true
      /*
       * 
       */
      val producerUsernameExists = Future {
      pcollection.find(Document("username" -> inputName)).subscribe(new Observer[Document](){
        var whatever = "just remember this is capable here"
          override def onNext(result: Document) = {
            println("I AM RUNNING ")
            var w = () => {
              pass = result.pass
              user = result.user
            }
            usernameExists = true
            p success w
            // println("isndieOnnext usernameexists:" + usernameExists)
          }
          override def onError(e: Throwable): Unit = println(s"Error: $e")
          
          override def onComplete(): Unit = println("Completed")
        })
      }
      println("outside foreach:" + usernameExists)
      val consumerUsernameExists = Future {
        println("jsadbfkasbd")
      f foreach { ifUsernameExistsFutureVar =>
        // if already exists, ask again
        println("inside foreach:" + usernameExists)
        if (ifUsernameExistsFutureVar == true) {
            println("user name already exists, please create another one")
        }
        else if (inputPassword.length<6) {
            println("password must be at least 6 characters. please enter again")
        }
        else {
            // db.password_file.insert({"name": inputName})
            // db.password_file.insert({"password: " inputPassword})
            pcollection.insertOne(Document("name" -> inputName, "password" -> inputPassword))
            exists = false
            println("IM HEREEEEEEE XXX")
        }
      }
      }
    }
    // //create account type: job posters and job seekers will have different interface
    // println("Please tell us what you would like to do with your account!")
    // var ans = ""
    // while (ans !="p" | ans != "f") {
    //     println("enter p if you'd like to post jobs")
    //     println("enter f if you'd like to find jobs")
    //     var ans = stdIn.readLine().toLowerCase()
    //     if (ans == "f") {
    //         db.password_file.update{{name:inputName}, $set: {account_type: "S" }}
    //         val stdIn = System.console()
    //         println("You've not created a resume yet. Press C to continue or any other key to opt out")
    //         var ans = stdIn.readLine().toLowerCase()
    //         if (ans == "c") {
    //             db.resume.insert({id: inputName})
    //             createResume(inputName)
    //         }
    //         else {
    //             println("our website...")
    //         }
    //     }
    //      else if (ans == "p") {
    //         db.password_file.update{{name:inputName}, $set: {account_type: "P" }}
    //         posterProce(inputName)
    //     }
    // }
  }



  // collection.createIndex(Indexes.ascending("name"))

  // val document1 = Document("name" -> "CafÃ© Con Leche" , 
  //                       "contact" -> Document("phone" -> "228-555-0149", 
  //                                             "email" -> "cafeconleche@example.com", 
  //                                             "location" -> Seq(-73.92502, 40.8279556)),
  //                       "stars" -> 3, "categories" -> Seq("Bakery", "Coffee", "Pastries"))
  
  // val document2 = Document("name" -> "jsandkjfn" , 
  //                       "contact" -> Document("phone" -> "228-555-0149", 
  //                                             "email" -> "cafeconleche@example.com", 
  //                                             "location" -> Seq(-73.92502, 40.8279556)),
  //                       "stars" -> 3, "categories" -> Seq("Bakery", "Coffee", "Pastries"))





  // collection.insertMany(Seq(document1, document2)).subscribe(new Observer[Completed] {
  //       override def onNext(result: Completed): Unit = {
  //         println("Inserted document2")

  //       }
  //       override def onError(e: Throwable): Unit = println("Failed")
  //       override def onComplete(): Unit = println("Completed")
  //     }
  // )

  
}

/*****************************************************************************/
// .subscribe(new Observer[Document](){
//         var whatever = "just remember this is capable here"

//         override def onNext(result: Document): Unit = {
//           println("YOURE INSIDE AN OBSERVABLE")
//           }
//         override def onError(e: Throwable): Unit = println(s"Error: $e")
        
//         override def onComplete(): Unit = println("Completed")
//       } })